// Code generated by MockGen. DO NOT EDIT.
// Source: expService.go
//
// Generated by this command:
//
//	mockgen -source=expService.go ExperienceService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "GO-Project/models"
	context "context"
	reflect "reflect"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockExperienceService is a mock of ExperienceService interface.
type MockExperienceService struct {
	ctrl     *gomock.Controller
	recorder *MockExperienceServiceMockRecorder
}

// MockExperienceServiceMockRecorder is the mock recorder for MockExperienceService.
type MockExperienceServiceMockRecorder struct {
	mock *MockExperienceService
}

// NewMockExperienceService creates a new mock instance.
func NewMockExperienceService(ctrl *gomock.Controller) *MockExperienceService {
	mock := &MockExperienceService{ctrl: ctrl}
	mock.recorder = &MockExperienceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExperienceService) EXPECT() *MockExperienceServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExperienceService) Create(ctx context.Context, experience *models.ExperienceDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, experience)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExperienceServiceMockRecorder) Create(ctx, experience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExperienceService)(nil).Create), ctx, experience)
}

// Delete mocks base method.
func (m *MockExperienceService) Delete(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExperienceServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExperienceService)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockExperienceService) FindAll() ([]*models.ExperienceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*models.ExperienceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockExperienceServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockExperienceService)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockExperienceService) FindById(id primitive.ObjectID) (*models.ExperienceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*models.ExperienceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockExperienceServiceMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockExperienceService)(nil).FindById), id)
}

// Update mocks base method.
func (m *MockExperienceService) Update(id primitive.ObjectID, experience *models.ExperienceDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, experience)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExperienceServiceMockRecorder) Update(id, experience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExperienceService)(nil).Update), id, experience)
}
